---
- name: Read in Variable Values from settings.yml
  include_vars:
    file: ../../settings.yml
    name: settings

- name: Check Settings / globus.client_id
  fail: 
    msg: "The variable globus.client_id must be set in your settings file. See README.md for more information"
  when: not settings.globus.client_id

- name: Check Settings / globus.secret_key
  fail: 
    msg: "The variable globus.secret_key must be set in your settings file. See README.md for more information"
  when: not settings.globus.secret_key

- name: Check Settings / globus.collections
  fail: 
    msg: "The variable globus.collections must be set in your settings file. See README.md for more information"
  when: not settings.globus.collections

- name: Check Settings / globus.collections[0].id
  fail: 
    msg: "The variable globus.collections must have a first element, with a property named 'id.' See README.md for more information"
  when: not settings.globus.collections[0].id


- name: Debug settings
  debug:
    var: settings

- name: Update apt-get
  shell:
    cmd: "apt-get update && touch ~/.apt-updated"
    creates: ~/.apt-updated

- name: Install required packages
  package:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - "build-essential"
      - "python3-setuptools"
      - git
      - curl
      - supervisor
      - python3-venv
      - python3-pip
      - python3-certbot
      - python3-certbot-nginx

- name: Install Node 18 apt sources
  shell:
    cmd: curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    creates: /etc/apt/sources.list.d/nodesource.list

- name: Install Node 18 packages
  package:
    name: nodejs
    state: present

- name: create /etc/globus-portal if it doesn't exist
  file:
      path: /etc/globus-portal
      state: directory
      recurse: yes

- name: create /srv/logs (logging path) if it doesn't exist
  file:
      path: /srv/logs
      state: directory
      recurse: yes

- name: Render settings.yml
  template:
    src: settings.yml.j2
    dest: /etc/globus-portal/settings.yml
  notify: restart gunicorn

- name: Create virtualvenv
  shell:
    cmd: "python3 -m venv {{ venv_path }}"
    creates: "{{ venv_path }}"


- name: Register Certbot
  shell:
    cmd: "certbot -n register --agree-tos --email {{ settings.administrator.email }} && touch /etc/letsencrypt/.registered"
    creates: "/etc/letsencrypt/.registered"
    executable: /bin/bash
  when: "\"docker\" not in group_names"
  tags:
    - nginx
    - certbot

- name: Setup cronjob for renewal
  cron:
    name: certbot-renewal
    job: "/bin/bash -lc '/usr/bin/certbot -q renew'"
    minute: "0"
    hour: "14"
  when: "\"docker\" not in group_names"
  tags:
    - nginx
    - certbot

- name: Check if cert file exists
  stat:
    path: "/etc/letsencrypt/live/{{ settings.hostname }}"
  register: ssl

- name: Stop gunicorn to acquire cert if cert not present
  service:
      name: supervisor
      state: "stopped"
  when: "not ssl.stat.exists and \"docker\" not in group_names"
  notify: restart gunicorn

- name: 'Get certificate'
  command: '/usr/bin/certbot -n --nginx certonly -d {{ settings.hostname }}'
  args:
    creates: '/etc/letsencrypt/live/{{ settings.hostname }}'
  ignore_errors: true
  when: "\"docker\" not in group_names"
  tags:
    - nginx
    - certbot

- name: Install cookiecutter
  pip:
    name: cookiecutter
    virtualenv: "{{ venv_path }}"

- name: Check latest remote commit hash
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: "git ls-files https://github.com/jkafader-esnet/cookiecutter-django-globus-app | grep main | awk '{print $1}' > /latest.hash"

- name: Stat latest commit hash file
  ansible.builtin.stat: 
    path: /latest.hash
  register: latest_hash


- name: Stat last commit hash file
  ansible.builtin.stat: 
    path: /last.hash
  register: last_hash

- name: Detect whether upstream_has_changed
  set_fact:
    upstream_has_changed: latest_hash.stat.checksum != last_hash.stat.checksum

- name: Overwrite last commit hash file if upstream_has_changed
  shell:
    executable: /bin/bash
    cmd: "cp /latest.hash /last.hash"
  when:
    upstream_has_changed

- name: Render cookiecutter settings file
  template:
    src: cookiecutter.yml.j2
    dest: /root/cookiecutter.yml
  register:
    cookiecutter_settings

- name: Remove exising application for re-render if cookiecutter settings have changed or if upstream_has_changed
  file:
      path: /backend
      state: absent
  when:
    cookiecutter_settings.changed or upstream_has_changed
  notify: restart gunicorn

- name: Install django-globus-app via Cookiecutter
  shell:
    chdir: /
    cmd: "source /venv/bin/activate && cookiecutter https://github.com/jkafader-esnet/cookiecutter-django-globus-app --no-input --config-file /root/cookiecutter.yml"
    creates: "/backend"
    executable: /bin/bash
  notify: restart gunicorn

- name: Install django-globus-app requirements
  pip:
    requirements: "/backend/requirements.txt"
    virtualenv: "{{ venv_path }}"
  notify: restart gunicorn

- name: Register path to site-packages
  shell:
    cmd: "source {{ venv_path }}/bin/activate && python3 -c \"import sysconfig; print(sysconfig.get_path('purelib'))\""
  args:
    executable: /bin/bash
  register: site_packages

#################################
# Workaround: this requires a fix in django-globus-portal-framework
# we will prepare a fork of this repo and a pull request for upstream
#################################

- name: Copy magnifying glass in place
  template:
    src: mag_glass.svg
    dest: "{{ site_packages.stdout }}/globus_portal_framework/static/globus-portal-framework/images/mag_glass.svg"

#################################
# Workaround: this requires a fix in https://github.com/NickolausDS/cookiecutter-django-globus-app
# we will prepare a fork of this repo and a pull request for upstream
#################################

- name: Copy local settings in place
  template:
    src: local.py.j2
    dest: /backend/backend/settings/local.py

- name: Run setup commands
  shell:
    chdir: /backend
    cmd: "{{ item.command }}"
  args:
    executable: /bin/bash
  with_items:
      - command: "npm install"
        creates: "/backend/node-modules"
      - command: "npm rebuild node-sass"
        creates: ""
      - command: "npm run build-production"
        creates: ""
      - command: "/venv/bin/python /backend/manage.py makemigrations"
        creates: ""
      - command: "/venv/bin/python /backend/manage.py migrate"
        creates: ""
      - command: "/venv/bin/python /backend/manage.py collectstatic --settings=$DJANGO_SETTINGS_MODULE --noinput"
        creates: ""

- name: Create gunicorn supervisor config
  template:
    src: gunicorn.conf.j2
    dest: /etc/supervisor/conf.d/gunicorn.conf
  notify: restart gunicorn

